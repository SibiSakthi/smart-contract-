// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract FundManager {
    address payable owner;//initialising variabile 
    uint256 withdrawalLimit;
    mapping (address => uint256) balances;

    event Deposit(address indexed from, uint256 value);
    event Withdrawal(address indexed to, uint256 value);

    constructor() {
        owner = payable(msg.sender);
        withdrawalLimit = 10 ether; // default withdrawal limit is 10 ether
    }

    function owner_withdrawl(uint256 amount) public onlyOwner {// owner withdrawel
        require(amount <= balances[msg.sender], "Insufficient balance");
        balances[owner] -= amount;
        }
function setWithdrawalLimit(uint256 newLimit) public onlyOwner {//changing withdrawal limit
        withdrawalLimit = newLimit;
    }
    function withdraw(uint256 amount) public {//function to withdray
        require(amount <= withdrawalLimit, "Withdrawal amount exceeds limit");
        require(amount <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] -= amount;
        //payable(msg.sender).transfer(amount);
        //emit Withdrawal(msg.sender, amount);
    }

    function deposit(uint128 amount) public payable {//function to deposite
        require(amount > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += amount;
        //emit Deposit(msg.sender, msg.value);
    }

    function getBalance() public view returns (uint256) {//to get balance
        return balances[msg.sender];
    }

    modifier onlyOwner() {// to modify owner
        require(msg.sender == owner, "Only contract owner can call this function");
        _;
    }
}
